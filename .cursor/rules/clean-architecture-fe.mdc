---
description: Enforce non-negotiable standards for clean architecture in the Digital Kudos Wall Frontend project
globs:
  - "digital-kudos-wall-frontend/src/**/*"
alwaysApply: false
---

# ðŸ§ª Standard Operating Procedure: Clean Architecture

**Status:** Mandatory  
**Version:** 1.0

## ðŸ“Œ Purpose

Adherence to this SOP is mandatory for all frontend features. Deviations are not permitted without explicit architectural review and approval. This is to ensure a scalable, maintainable, and testable codebase aligned with our long-term vision for micro-frontends and a Product Operating Model.

This SOP defines the standards for implementing a Clean Architecture in the Digital Kudos Wall frontend application. The primary goal is to decouple business logic from the UI framework (React), enabling independent development, testing, and evolution of the core application functionality.

---

## 2. Scope

This SOP applies to all feature development within the frontend codebase.

## 3. The Layers of Frontend Architecture

All frontend code MUST be organized into the following layers. The fundamental rule is the **Dependency Rule**: source code dependencies can only point inwards. Nothing in an inner layer can know anything at all about something in an outer layer.

```
+-----------------------------------------------------------------------------------------+
| 4. Frameworks & Drivers (React Components, HTTP Client)                                 |
+-----------------------------------------------------------------------------------------+
       ^
       | Dependencies
       v
+-----------------------------------------------------------------------------------------+
| 3. Interface Adapters (Custom Hooks, Repositories, Service Adapters)                    |
+-----------------------------------------------------------------------------------------+
       ^
       | Dependencies
       v
+-----------------------------------------------------------------------------------------+
| 2. Application Business Rules (Use Cases & Service Interfaces)                           |
+-----------------------------------------------------------------------------------------+
       ^
       | Dependencies
       v
+-----------------------------------------------------------------------------------------+
| 1. Enterprise Business Rules (Entities / Types)                                         |
+-----------------------------------------------------------------------------------------+
```

### Layer 1: Enterprise Business Rules (Entities / Types)

- **Content:** Core business objects and data structures. In TypeScript, these are typically `type` or `interface` definitions.
- **Location:** `src/features/{feature-name}/types/`
- **Dependencies:** None.
- **Example Implementation:** `src/features/auth/types/User.ts`.
- **Example:**
  ```typescript
  // src/features/auth/types/User.ts
  export interface User {
    id: string;
    name: string;
    email: string;
  }
  ```

### Layer 2: Application Business Rules (Use Cases & Service Interfaces)

- **Standard:** This is the heart of the application logic. It defines the operations the application can perform and the contracts (interfaces) for any external dependencies.
- **Content:**
  - **Use Cases:** Contains application-specific orchestration logic. Each use case MUST be a `class` that encapsulates a single user interaction flow (e.g., `RegisterUserUseCase`). It MUST NOT contain any reference to the UI framework or specific data-fetching libraries. It depends on service interfaces to interact with outer layers. Use Cases use composition to get its job done. Use Responsibility Driven Design to encapsulate objects and it's roles and responsibilities.
  - **Service Interfaces:** These are the contracts that Use Cases depend on. They define what a service can do, but not how it does it. This is key to inversion of control.
- **Location:**
  - Use Cases: `src/features/{feature-name}/application/`
  - Service Interfaces: `src/features/{feature-name}/interfaces/`
  - Repository Interfaces: `src/features/{feature-name}/interfaces/`
  - **Example Implementation:**:
    - Use Case: `src/features/auth/application/use-cases/register-user/RegisterUserUseCase.ts`
    - Service Interface: `src/features/auth/application/interfaces/AuthService.ts`
    - Repository Interface: `src/features/auth/application/interfaces/UserRepository.ts`
- **Example:**

  ```typescript
  // src/features/auth/interfaces/AuthService.ts
  import { User } from "../types/User";
  export type RegisterUserPayload = Omit<User, "id"> & { password: string };
  export interface AuthService {
    registerUser(payload: RegisterUserPayload): Promise<User>;
  }

  // src/features/auth/interfaces/UserRepository.ts
  export interface UserRepository {
    register(payload: RegisterUserPayload): Promise<User>;
  }

  // src/features/auth/application/RegisterUserUseCase.ts
  import { AuthService, RegisterUserPayload } from "../interfaces/AuthService";
  import { User } from "../types/User";

  export class RegisterUserUseCase {
    constructor(private readonly authService: AuthService) {}

    async execute(payload: RegisterUserPayload): Promise<User> {
      // Application-specific logic lives here. e.g., analytics.track()
      return this.authService.registerUser(payload);
    }
  }
  ```

### Layer 3: Interface Adapters (Hooks, Repositories, Service Adapters)

- **Standard:** This layer acts as the bridge between the application logic (Use Cases) and the technical details of the outer layer (Frameworks). It adapts data and calls into a format the Use Cases and UI can understand.
- **Content:**
  - **Custom Hooks:** The entry point from the UI. Manages UI state and side effects. Responsible for instantiating Use Cases and all their dependencies (acting as a Dependency Injection container).
  - **Repositories:** Concrete implementations of data-access interfaces. They adapt a specific data source (e.g., a REST API via `FetchHttpClient`) to the interface required by a service adapter or use case.
  - **Service Adapters:** Concrete implementations of the service interfaces defined in Layer 2. They orchestrate calls to one or more repositories to fulfill the contract of the service interface.
- **Location:**
  - Hooks: `src/features/{feature-name}/hooks/`
  - Repositories: `src/features/{feature-name}/repositories/`
  - Service Adapters: `src/features/{feature-name}/services/`
- **Dependencies:** Depends on Use Cases (inward) and specific frameworks (outward).
- **Example Implementation:**:

  - Hooks: `src/features/auth/hooks/useRegistration.ts`
  - Repositories: `src/features/auth/repositories/UserRepository.ts`
  - Service Adapters: `src/features/auth/services/AuthServiceAdapter.ts`

- **Example:**

  ```typescript
  // src/features/auth/hooks/useRegistration.ts
  import { useState, useMemo } from "react";
  import { RegisterUserUseCase } from "../application/RegisterUserUseCase";
  import { AuthServiceAdapter } from "../services/AuthServiceAdapter";
  import { UserRepositoryImpl } from "../repositories/UserRepository";
  import { FetchHttpClient } from "@/services/FetchHttpClient"; // Concrete Driver

  export const useRegistration = () => {
    const [error, setError] = useState<string | null>(null);
    // ... other state ...

    // The hook acts as a DI container, composing the dependencies.
    const registerUserUseCase = useMemo(() => {
      const httpClient = new FetchHttpClient();
      const userRepository = new UserRepositoryImpl(httpClient);
      const authService = new AuthServiceAdapter(userRepository);
      return new RegisterUserUseCase(authService);
    }, []);

    const handleSubmit = async (data) => {
      await registerUserUseCase.execute(data);
      // ... handle result ...
    };

    return { error, handleSubmit /* ... */ };
  };
  ```

### Layer 4: Frameworks & Drivers (React Components & HTTP Client)

- **Standard:** The outermost layer, composed of implementation details and framework-specific code.
- **Content:**
  - **React Components:** "Dumb" components that only render UI based on props. They delegate all logic and event handling to the custom hooks provided to them.
  - **HTTP Client:** A generic, reusable client for making network requests (e.g., a wrapper around `fetch`). It has no knowledge of the application's business rules.
- **Location:**
  - Page Components: `src/features/{feature-name}/routes/`
  - Dumb Components: `src/features/{feature-name}/components/`
  - Generic Services: `src/services/` (e.g., `FetchHttpClient.ts`)
  - Generic Interfaces: `src/shared/interfaces/`
- **Example Implementation:**:
  - Page Component: `src/features/auth/routes/RegistrationPage.tsx`
  - Dumb Component: `src/features/auth/components/RegistrationForm.tsx`
  - Generic Services: `src/services/FetchHttpClient.ts`
  - Generic Interfaces: `src/shared/interfaces/HttpClient.ts`

## 4. Directory Structure (Non-Negotiable)

To enforce this separation, all feature-based modules MUST follow this directory structure:

```
src/
â”œâ”€â”€ features/
â”‚   â””â”€â”€ {feature-name}/
â”‚       â”œâ”€â”€ application/   // Layer 2: Use Case classes (RegisterUserUseCase.ts)
â”‚       â”œâ”€â”€ components/    // Layer 4: Dumb React Components (RegistrationForm.tsx)
â”‚       â”œâ”€â”€ hooks/         // Layer 3: Custom Hooks (useRegistration.ts)
â”‚       â”œâ”€â”€ interfaces/    // Layer 2/3: Service & Repo Interfaces (AuthService.ts, UserRepository.ts)
â”‚       â”œâ”€â”€ repositories/  // Layer 3: Concrete repository implementations (UserRepository.ts)
â”‚       â”œâ”€â”€ routes/        // Layer 4: Page-level Components (RegistrationPage.tsx)
â”‚       â”œâ”€â”€ services/      // Layer 3: Concrete service adapters (AuthServiceAdapter.ts)
â”‚       â””â”€â”€ types/         // Layer 1: Data structures (User.ts)
â”‚
â”œâ”€â”€ services/              // Layer 4: Generic, reusable services (FetchHttpClient.ts)
â”‚
â””â”€â”€ shared/
    â””â”€â”€ interfaces/        // Layer 4: Interfaces for generic services (HttpClient.ts)
```

## 5. Enforcement

Violation of these standards will result in build failures during CI (where possible) and/or rejection during code review. These standards are non-negotiable to maintain the integrity, scalability, and testability of the frontend architecture.
